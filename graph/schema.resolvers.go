package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"
	"mihirgql/graph/model"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInputField) (*model.User, error) {
	userId := uuid.New()
	user := model.User{
		ID:       userId.String(),
		Username: input.Username,
		Password: input.Password,
	}

	r.users = append(r.users, &user)

	return &user, nil
}

// CreatePlaylist is the resolver for the createPlaylist field.
func (r *mutationResolver) CreatePlaylist(ctx context.Context, input model.PlaylistInputField) (*model.Playlist, error) {
	playlistId := uuid.New()
	musics := []*model.Music{}

	for _, mId := range musics {
		m, err := GetMusicById(mId.ID, r.musics)
		if err != nil {
			return nil, err
		}

		musics = append(musics, m)
	}

	user, err := GetUser(input.Author, r.users)
	if err != nil {
		return nil, err
	}

	playlist := model.Playlist{
		ID:           playlistId.String(),
		PlaylistName: input.PlaylistName,
		Musics:       musics,
		Author:       user,
	}

	return &playlist, nil
}

func GetUser(u string, users []*model.User) (*model.User, error) {
	for _, user := range users {
		if user.ID == u {
			return user, nil
		}
	}

	return nil, errors.New("user not found error")
}

func GetMusicById(musicId string, musics []*model.Music) (*model.Music, error) {
	for _, m := range musics {
		if m.ID == musicId {
			return m, nil
		}
	}
	return nil, errors.New("music not found")
}

// CreateMusic is the resolver for the createMusic field.
func (r *mutationResolver) CreateMusic(ctx context.Context, input model.MusicInputField) (*model.Music, error) {
	panic(fmt.Errorf("not implemented: CreateMusic - createMusic"))
}

// Playlists is the resolver for the playlists field.
func (r *queryResolver) Playlists(ctx context.Context) ([]*model.Playlist, error) {
	panic(fmt.Errorf("not implemented: Playlists - playlists"))
}

// Playlist is the resolver for the playlist field.
func (r *queryResolver) Playlist(ctx context.Context, id string) (*model.Playlist, error) {
	panic(fmt.Errorf("not implemented: Playlist - playlist"))
}

// Musics is the resolver for the musics field.
func (r *queryResolver) Musics(ctx context.Context) ([]*model.Music, error) {
	panic(fmt.Errorf("not implemented: Musics - musics"))
}

// Music is the resolver for the music field.
func (r *queryResolver) Music(ctx context.Context, id string) (*model.Music, error) {
	panic(fmt.Errorf("not implemented: Music - music"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
